input {
    udp {
        port => 5140
    }
}

filter {

    if [message] =~ "merlin" {
        ruby {
            code => '
            require "redis"
            r = Redis.new(:host => "cache")
            msg = event.get("message")
            r.rpush("runes",msg)
            #r.publish("qt",ipaddr)
            '
        }
    }
}

output {
    stdout {
        codec => rubydebug
        #codec => json
        #codec => dots
    }

    if "Webconfig: login failure via HTTP" in [message] {
        redis {
            host => cache
            data_type => "channel"
            key => "siemprocwlclogin"
        }
    }

    if "An account failed to log on" in [message] {
        redis {
            host => cache
            data_type => "channel"
            key => "siemprocwindowslogin"

        }
    }

    #if "Found Rogue AP!" in [message] {
    if [message] =~ "Found Rogue AP!" {
        redis {
            host => cache
            data_type => "channel"
            key => "siemprocrogueap_found"

        }
    }

    if "Lost Rogue AP" in [message] {
        redis {
            host => cache
            data_type => "channel"
            key => "siemprocrogueap_lost"

        }
    }

    if "Interference detected" in [message] {
        redis {
            host => cache
            data_type => "channel"
            key => "siemprocjamming"

        }
    }

    if "sent RADIUS challenge for user id" in [message] {
        redis {
            host => cache
            data_type => "channel"
            key => "siemprocwlcradiuslogin"

        }
    }

    #syslog {
    #    port => 514
    #    host => "10.7.1.19"    
    #    protocol => "udp"
    #}
}
