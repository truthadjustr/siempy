input {
    udp {
        port => 5140
    }
}

filter {

    if [message] =~ "merlin" {
        ruby {
            code => '
            require "redis"
            r = Redis.new(:host => "cache")
            msg = event.get("message")
            r.rpush("runes",msg)
            #r.publish("qt",ipaddr)
            '
        }
    }

    if "Webconfig: login failure via HTTP" in [message] {
        mutate {
            add_field => {
                "redischannel" => "siemprocwlclogin"
            }
        }
    } else if "An account failed to log on" in [message] {
        grok {
            match => { "message" => "%{IPORHOST:ipv4orhost} %{GREEDYDATA:}" }
        }
        mutate {
            add_field => {
                "redischannel" => "siemprocwindowslogin"
            }
        }
    } else if [message] =~ "Found Rogue AP!" {
        mutate {
            add_field => {
                "redischannel" => "siemprocrogueap_found"
            }

        }
    } else if "Lost Rogue AP" in [message] {
        mutate {
            add_field => {
                "redischannel" => "siemprocrogueap_lost"
            }

        }
    } else if "Interference detected" in [message] {
        mutate {
            add_field => {
                "redischannel" => "siemprocjamming"
            }
        }
    } else if "sent RADIUS challenge for user id" in [message] {
        mutate {
            add_field => {
                "redischannel" => "siemprocwlcradiuslogin"
            }
        }
    }
}

output {
    stdout {
        codec => rubydebug
        #codec => json
        #codec => dots
    }

    if [redischannel] {
        redis {
            host => cache
            data_type => "channel"
            key => "%{redischannel}"
        }
    }

    file {
        path => "/log/udp_5140.log"
    }

    syslog {
        port => 514
        host => "10.7.1.19"    
        protocol => "udp"
    }
}
